package main

import (
	"context"
	"fmt"
	"time"
)

func main() {
	// Создаем контекст с таймаутом
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// Запускаем горутину с контекстом
	go doSomething(ctx)

	// Ждем завершения горутины
	select {
	case <-ctx.Done():
		fmt.Println("Время выполнения истекло")
	}
}

func doSomething(ctx context.Context) {
	for {
		select {
		case <-ctx.Done():
			fmt.Println("Операция отменена")
			return
		default:
			fmt.Println("Выполняем работу...")
			time.Sleep(1 * time.Second)
		}
	}
}

/*
В Go (Golang), context - это пакет,
который предоставляет механизм для передачи контекста между горутинами,
включая данные о времени ожидания, отмены и других контекстных данных через вызовы функций.
Пакет context является важным инструментом для управления асинхронными операциями, особенно в системах,
где важно контролировать жизненный цикл запросов и управлять ресурсами.

Основные функции пакета context:
---Время ожидания:
Вы можете установить таймаут для операции,
чтобы она автоматически завершилась, если не будет завершена в течение определенного времени.
---Отмена:
Вы можете инициировать отмену операции,
чтобы освободить ресурсы и завершить все операции, связанные с этим контекстом.
---Передача данных:
Вы можете передавать данные через контекст,
что полезно для передачи дополнительной информации между различными уровнями вашего приложения.
---Ветвление:
Вы можете создавать новые контексты на основе существующих,
что позволяет управлять жизненным циклом подзадач отдельно от родительских задач.

*/
